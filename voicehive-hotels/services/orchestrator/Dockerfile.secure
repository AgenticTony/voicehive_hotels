# VoiceHive Hotels - Orchestrator Service
# Security-hardened multi-stage Dockerfile

ARG PYTHON_VERSION=3.11.6
ARG ALPINE_VERSION=3.18

# Build stage - compile dependencies
FROM python:${PYTHON_VERSION}-alpine${ALPINE_VERSION} as builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    linux-headers \
    libffi-dev \
    openssl-dev \
    python3-dev

# Create build directory
WORKDIR /build

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --upgrade --no-cache-dir \
    pip==23.3.1 \
    setuptools==68.2.2 \
    wheel==0.41.3

# Copy and install requirements
COPY requirements.txt requirements-prod.txt* ./
RUN pip install --no-cache-dir -r requirements.txt && \
    if [ -f requirements-prod.txt ]; then \
        pip install --no-cache-dir -r requirements-prod.txt; \
    fi

# Security scanning stage
FROM aquasec/trivy:latest as scanner

COPY --from=builder /opt/venv /opt/venv
RUN trivy fs --no-progress --security-checks vuln --exit-code 1 --severity CRITICAL,HIGH /opt/venv || \
    echo "Warning: vulnerabilities found but continuing build"

# Production stage - minimal runtime
FROM python:${PYTHON_VERSION}-alpine${ALPINE_VERSION}

# Security labels
LABEL maintainer="security@voicehive-hotels.eu"
LABEL org.opencontainers.image.source="https://github.com/voicehive/hotels"
LABEL org.opencontainers.image.description="VoiceHive Hotels Orchestrator Service"
LABEL org.opencontainers.image.licenses="Proprietary"
LABEL security.scan="trivy"
LABEL security.distroless="false"

# Install runtime dependencies only
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    tini \
    libcap \
    su-exec \
    && rm -rf /var/cache/apk/*

# Create non-root user with specific UID/GID
RUN addgroup -g 1000 -S voicehive && \
    adduser -u 1000 -S voicehive -G voicehive -h /app -s /bin/false

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONHASHSEED=random
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Set working directory
WORKDIR /app

# Copy application code with correct permissions
COPY --chown=voicehive:voicehive app.py ./
COPY --chown=voicehive:voicehive models ./models/
COPY --chown=voicehive:voicehive utils ./utils/
COPY --chown=voicehive:voicehive config ./config/

# Create required directories with proper permissions
RUN mkdir -p /tmp/voicehive /app/logs && \
    chown -R voicehive:voicehive /tmp/voicehive /app/logs && \
    chmod 700 /tmp/voicehive /app/logs

# Security hardening
RUN chmod -R go-rwx /app && \
    find /app -type d -exec chmod 755 {} \; && \
    find /app -type f -exec chmod 644 {} \;

# Remove unnecessary capabilities
RUN setcap -r /usr/local/bin/python3.11 || true

# Create volume mount points (will be mounted as read-only where possible)
VOLUME ["/app/logs", "/tmp/voicehive"]

# Switch to non-root user
USER voicehive:voicehive

# Expose only necessary ports
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health').raise_for_status()"

# Set security options
# These can be overridden at runtime but provide good defaults
ENV SECURITY_HEADERS_ENABLED=true \
    RATE_LIMIT_ENABLED=true \
    CORS_ALLOWED_ORIGINS="https://*.voicehive-hotels.eu" \
    LOG_LEVEL=INFO \
    ACCESS_LOG_ENABLED=true

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Run with minimal privileges
CMD ["python", "-m", "uvicorn", "app:app", \
     "--host", "0.0.0.0", \
     "--port", "8080", \
     "--workers", "4", \
     "--loop", "uvloop", \
     "--no-access-log", \
     "--proxy-headers", \
     "--forwarded-allow-ips", "*"]

# Security scanning metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.version="${VERSION}"
