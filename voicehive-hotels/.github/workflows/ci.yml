name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: voicehive
  AWS_REGION: eu-west-1

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  test-python:
    name: Test Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [orchestrator, connectors, riva-proxy, tts-router]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        ruff check services/${{ matrix.service }} connectors/
        mypy services/${{ matrix.service }} connectors/ --strict || true
    
    - name: Run tests
      run: |
        pytest -v --cov=services/${{ matrix.service }} --cov=connectors \
          --cov-report=xml --cov-report=term \
          --junit-xml=test-results-${{ matrix.service }}.xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.service }}
        path: test-results-${{ matrix.service }}.xml

  test-connectors:
    name: Test PMS Connectors
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r connectors/requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run golden contract tests
      run: |
        pytest connectors/tests/golden_contract -v --junit-xml=golden-test-results.xml
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: golden-test-results
        path: golden-test-results.xml

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, test-python, test-connectors]
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - service: orchestrator
            context: ./services/orchestrator
          - service: connectors
            context: ./connectors
          - service: riva-proxy
            context: ./services/asr/riva-proxy
          - service: tts-router
            context: ./services/tts/router
          - service: media-agent
            context: ./services/media/livekit-agent
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Init
      working-directory: ./infra/terraform
      run: terraform init -backend=false
    
    - name: Terraform Format Check
      working-directory: ./infra/terraform
      run: terraform fmt -check
    
    - name: Terraform Validate
      working-directory: ./infra/terraform
      run: terraform validate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.voicehive-hotels.eu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name voicehive-staging --region ${{ env.AWS_REGION }}
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -k infra/k8s/overlays/staging
        kubectl rollout status deployment/orchestrator -n voicehive
        kubectl rollout status deployment/connectors -n voicehive
    
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging.voicehive-hotels.eu/healthz || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.voicehive-hotels.eu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name voicehive-production --region ${{ env.AWS_REGION }}
    
    - name: Deploy to Kubernetes (Blue-Green)
      run: |
        # Deploy to green environment
        kubectl apply -k infra/k8s/overlays/production/green
        
        # Wait for green to be ready
        kubectl rollout status deployment/orchestrator-green -n voicehive
        kubectl rollout status deployment/connectors-green -n voicehive
        
        # Run tests against green
        sleep 30
        GREEN_URL=$(kubectl get ingress -n voicehive green-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f https://$GREEN_URL/healthz || exit 1
        
        # Switch traffic to green
        kubectl patch service orchestrator -n voicehive -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service connectors -n voicehive -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Clean up old blue deployment
        sleep 60
        kubectl delete -k infra/k8s/overlays/production/blue || true
        
        # Rename green to blue for next deployment
        kubectl label deployment orchestrator-green version=blue --overwrite -n voicehive
        kubectl label deployment connectors-green version=blue --overwrite -n voicehive
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Production deployment ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run load tests
      run: |
        pip install locust
        locust -f tests/load/locustfile.py \
          --headless \
          --users 50 \
          --spawn-rate 5 \
          --run-time 5m \
          --host https://staging.voicehive-hotels.eu \
          --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
    
    - name: Check SLA compliance
      run: |
        # Check if P95 latency is under 500ms
        # This would parse the performance report and fail if SLA is violated
        python scripts/check-sla.py performance-report.html
