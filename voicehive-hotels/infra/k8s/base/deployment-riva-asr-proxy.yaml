apiVersion: apps/v1
kind: Deployment
metadata:
  name: riva-asr-proxy
  labels:
    app: riva-asr-proxy
    component: asr
spec:
  replicas: 2
  selector:
    matchLabels:
      app: riva-asr-proxy
  template:
    metadata:
      labels:
        app: riva-asr-proxy
        version: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voicehive-riva-asr-proxy
      affinity:
        # Must run on GPU nodes
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - g4dn.xlarge
                - g4dn.2xlarge
                - g4dn.4xlarge
                - p3.2xlarge
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - eu-west-1a
                - eu-west-1b
                - eu-west-1c
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - riva-asr-proxy
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: riva-asr-proxy
        image: voicehive/riva-asr-proxy:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: AWS_REGION
          value: "eu-west-1"
        - name: RIVA_SERVER_URL
          value: "riva-server.default.svc.cluster.local:50051"
        - name: LANGUAGE_MODELS
          value: "en-US,de-DE,es-ES,fr-FR,it-IT"
        - name: MODEL_PATH
          value: "/models"
        - name: ENABLE_STREAMING
          value: "true"
        - name: ENABLE_GPU_ACCELERATION
          value: "true"
        - name: LOG_LEVEL
          value: "INFO"
        - name: MAX_CONCURRENT_STREAMS
          value: "50"
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /.cache
        - name: models
          mountPath: /models
          readOnly: true
        - name: shm
          mountPath: /dev/shm
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - SYS_NICE  # For GPU access
          readOnlyRootFilesystem: true
      - name: riva-server
        image: nvcr.io/nvidia/riva/riva-speech:2.13.0
        imagePullPolicy: Always
        ports:
        - containerPort: 50051
          name: grpc
        env:
        - name: RIVA_API_KEY
          valueFrom:
            secretKeyRef:
              name: voicehive-riva-secrets
              key: api-key
        volumeMounts:
        - name: models
          mountPath: /riva-models
        - name: shm
          mountPath: /dev/shm
        resources:
          requests:
            memory: "8Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
          limits:
            memory: "16Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - SYS_NICE  # For GPU access
          readOnlyRootFilesystem: false  # Riva may need to write temp files
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
      - name: models
        persistentVolumeClaim:
          claimName: riva-models-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: riva-asr-proxy
  labels:
    app: riva-asr-proxy
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: riva-asr-proxy
---
apiVersion: v1
kind: Service
metadata:
  name: riva-server
  labels:
    app: riva-server
spec:
  type: ClusterIP
  ports:
  - port: 50051
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app: riva-asr-proxy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: voicehive-riva-asr-proxy
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/voicehive-riva-asr-proxy
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: riva-models-pvc
spec:
  accessModes:
  - ReadOnlyMany
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 100Gi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: riva-asr-proxy-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: riva-asr-proxy
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: riva_active_streams
      target:
        type: AverageValue
        averageValue: "25"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
