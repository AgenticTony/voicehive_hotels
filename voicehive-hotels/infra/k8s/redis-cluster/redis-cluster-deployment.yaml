apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: voicehive
data:
  redis.conf: |
    # Redis Cluster Configuration for VoiceHive Hotels
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip ${POD_IP}
    cluster-announce-port 6379
    cluster-announce-bus-port 16379

    # Memory and performance settings
    maxmemory 2gb
    maxmemory-policy allkeys-lru

    # Persistence settings
    save 900 1
    save 300 10
    save 60 10000

    # Network settings
    tcp-keepalive 300
    timeout 0

    # Security settings
    protected-mode no

    # Logging
    loglevel notice
    logfile ""

    # Performance optimizations
    tcp-backlog 511
    databases 1

    # Cluster settings
    cluster-require-full-coverage no
    cluster-allow-reads-when-down no

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: voicehive
  labels:
    app: redis-cluster
spec:
  ports:
    - port: 6379
      targetPort: 6379
      name: client
    - port: 16379
      targetPort: 16379
      name: gossip
  clusterIP: None
  selector:
    app: redis-cluster

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: voicehive
  labels:
    app: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
        - name: redis
          image: redis:7.2-alpine
          ports:
            - containerPort: 6379
              name: client
            - containerPort: 16379
              name: gossip
          command:
            - redis-server
          args:
            - /etc/redis/redis.conf
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: conf
              mountPath: /etc/redis/
              readOnly: false
            - name: data
              mountPath: /data
              readOnly: false
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 2Gi
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: conf
          configMap:
            name: redis-cluster-config
            defaultMode: 0755
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - redis-cluster
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 10Gi

---
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: voicehive
  labels:
    app: redis-cluster-init
spec:
  template:
    metadata:
      labels:
        app: redis-cluster-init
    spec:
      restartPolicy: OnFailure
      containers:
        - name: redis-cluster-init
          image: redis:7.2-alpine
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for Redis pods to be ready..."

              # Wait for all Redis pods to be ready
              for i in $(seq 0 5); do
                until redis-cli -h redis-cluster-${i}.redis-cluster.voicehive.svc.cluster.local ping; do
                  echo "Waiting for redis-cluster-${i}..."
                  sleep 2
                done
              done

              echo "All Redis pods are ready. Creating cluster..."

              # Create cluster
              redis-cli --cluster create \
                redis-cluster-0.redis-cluster.voicehive.svc.cluster.local:6379 \
                redis-cluster-1.redis-cluster.voicehive.svc.cluster.local:6379 \
                redis-cluster-2.redis-cluster.voicehive.svc.cluster.local:6379 \
                redis-cluster-3.redis-cluster.voicehive.svc.cluster.local:6379 \
                redis-cluster-4.redis-cluster.voicehive.svc.cluster.local:6379 \
                redis-cluster-5.redis-cluster.voicehive.svc.cluster.local:6379 \
                --cluster-replicas 1 \
                --cluster-yes

              echo "Redis cluster created successfully!"

              # Verify cluster status
              redis-cli -h redis-cluster-0.redis-cluster.voicehive.svc.cluster.local cluster info
              redis-cli -h redis-cluster-0.redis-cluster.voicehive.svc.cluster.local cluster nodes

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-client
  namespace: voicehive
  labels:
    app: redis-cluster
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: client
  selector:
    app: redis-cluster

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-cluster-metrics
  namespace: voicehive
  labels:
    app: redis-cluster
spec:
  selector:
    matchLabels:
      app: redis-cluster
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics

---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: voicehive
  labels:
    app: redis-exporter
spec:
  ports:
    - port: 9121
      targetPort: 9121
      name: metrics
  selector:
    app: redis-exporter

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: voicehive
  labels:
    app: redis-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-exporter
  template:
    metadata:
      labels:
        app: redis-exporter
    spec:
      containers:
        - name: redis-exporter
          image: oliver006/redis_exporter:v1.55.0
          ports:
            - containerPort: 9121
              name: metrics
          env:
            - name: REDIS_ADDR
              value: "redis://redis-cluster-client:6379"
            - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
              value: "true"
            - name: REDIS_EXPORTER_IS_CLUSTER
              value: "true"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9121
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-cluster-pdb
  namespace: voicehive
spec:
  minAvailable: 4
  selector:
    matchLabels:
      app: redis-cluster

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-cluster-network-policy
  namespace: voicehive
spec:
  podSelector:
    matchLabels:
      app: redis-cluster
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: voicehive
        - podSelector:
            matchLabels:
              app: voicehive-orchestrator
        - podSelector:
            matchLabels:
              app: redis-exporter
      ports:
        - protocol: TCP
          port: 6379
        - protocol: TCP
          port: 16379
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: voicehive
        - podSelector:
            matchLabels:
              app: redis-cluster
      ports:
        - protocol: TCP
          port: 6379
        - protocol: TCP
          port: 16379
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
